{
  "name": "socket.io-events",
  "version": "0.4.2",
  "description": "Power your socket.io apps with express like event routing.",
  "main": "index.js",
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:turbonetix/socket.io-events.git"
  },
  "keywords": [
    "socket.io",
    "event",
    "router",
    "middleware"
  ],
  "author": {
    "name": "Nathan G. Romano",
    "email": "nathan.g.romano"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/turbonetix/socket.io-event/issues"
  },
  "homepage": "https://github.com/turbonetix/socket.io-events",
  "devDependencies": {
    "sandboxed-module": "~0.3.0",
    "grunt-jasmine-bundle": "~0.2.0",
    "coffee-script": "~1.7.1",
    "grunt-cli": "~0.1.13",
    "grunt": "~0.4.5",
    "supertest": "~0.13.0",
    "request": "~2.36.0",
    "socket.io": "~1.0.4",
    "socket.io-client": "~1.0.4"
  },
  "dependencies": {
    "debug": "^2"
  },
  "readme": "[![Build Status](https://travis-ci.org/turbonetix/socket.io-events.svg?branch=master)](https://travis-ci.org/turbonetix/socket.io-events)\n[![NPM version](https://badge.fury.io/js/socket.io-events.svg)](http://badge.fury.io/js/socket.io-events)\n[![David DM](https://david-dm.org/turbonetix/socket.io-events.png)](https://david-dm.org/turbonetix/socket.io-events.png)\n\nPower your [socket.io](https://github.com/Automattic/socket.io \"socket.io\") apps with [express](https://github.com/visionmedia/express \"express\") like `event` routing.\n\n`$ npm install socket.io-events`\n\n```javascript\nvar io = require('socket.io')(3000);\nvar router = require('socket.io-events')();\nrouter.on('*', function (sock, args, next) {\n  var name = args.shift(), msg = args.shift();\n  sock.emit('received event', name, msg);\n});\nio.use(router);\n```\n\n# Features\n\n* Easy to use interface for manipulating socket.io events.\n* Express-like routing capabilties for socket.io events.\n* Gives you more control over how events are handled.\n* Attach `Router` instances to other `Router` instances.\n* Support for \"wildcard\" (*) and Regular Expression matching.\n* Event consumption and propagation.\n\n# Examples\n\nThe method `on` is an alias to `use`.\n\n```javascript\nvar assert = require('assert');\nvar router = require('socket.io-events')();\n\n// handles all events\nrouter.on(function (socket, args, next) {\n  next();\n});\n\n// handles all events too\nrouter.on('*', function (socket, args, next) {\n  next();\n});\n\n// handles events matching 'some*'\nrouter.on('some*', function (socket, args, next) {\n  next();\n});\n\n// handles events matching '*events'\nrouter.on('*event', function (socket, args, next) {\n  next();\n});\n\n// handle events matching /^\\w+/ \nrouter.on(/^\\w+/, function (socket, args, next) {\n  next();\n});\n\n// handles all events\nrouter.on(function (socket, args) {\n  //emits back to the client, and ends the chain.  \n  //Think `res.end()` for express.\n  //calling `emit()` consumes the event which means no other handlers\n  //get a chance to process it.\n  socket.emit(args.shift(), args);\n});\n\nrouter.on(function (socket, args) {\n  //this wont fire because socket.emit() \n  //has been called which is like `res.end()` in express.\n});\n\nvar io = require('socket.io')(3000);\nio.use(router);\n```\n\nHere is an example of *not* consuming the event and letting [socket.io](https://github.com/Automattic/socket.io \"socket.io\")\nhandle things *business as usual*.\n\n```javascript\n\nvar router = require('socket.io-events')();\nrouter.on(function (socket, args, next) {\n  //do something, but don't consume it.\n  next();\n});\n\nvar io = require('socket.io')(3000);\nio.use(router);\nio.on('connection', function (socket) {\n  socket.on('echo', function (data) {\n    socket.emit('echo', data);  \n  });\n});\n```\n\nHere is an example of calling `next()` with an `Error` object, and having an error handler capture it.\n\n```javascript\nvar router = require('socket.io-events')();\n\nrouter.on('some event', function (socket, args, next) {\n  next(new Error('something wrong');\n});\n\nrouter.on(function (err, socket, args, next) {\n  socket.emit('error', err);\n});\n```\n\nYou can recover from an error too.\n\n```javascript\nvar router = require('socket.io-events')();\n\nrouter.on('some event', function (socket, args, next) {\n  next(new Error('something wrong');\n});\n\nrouter.on(function (err, socket, args, next) {\n  //I handled the error so continue to the next middleware.\n  next();\n});\n\nrouter.on(function (socket, args, next) {\n  //I recovered from the error.\n  next();\n});\n\nio.use(router);\n```\n\nYou can even attach a `Router' intance to another `Router` intance.\n\n```javascript\nvar Router = require('socket.io-events')();\n\nvar a = Router();\na.use(function (sock, args, next) { next() });\n\nvar b = Router();\nb.use(function (sock, args, next) { next() });\n\na.use(b)\n\nvar io = require('socket.io')(3000);\nio.use(a);\n```\n\n# API\n\n## Router\n\nGet the `Router` class.\n\n```javascript\nvar Router = require('socket.io-events');\n```\n\nThe `use` and `on` methods are equivalent.  They also can be chained.\n\n```javascript\nvar router = Router()\n  .use(function (sock, args, next) { })\n  .use(function (sock, args, next) { })\n  .use(function (sock, args, next) { });\n```\n\n### Router#()\n\nMake a `Router` instance\n\n```javascript\nvar router = Router();\n```\n\n### Router#use(fn:Function, ...)\n\nAttach a `function` to the router.\n\n```javascript\nrouter.use(function (sock, args, next) {\n  //do something!\n  next();\n});\n```\n\nYou can pass in multiple `function`s.\n\n```javascript\nvar a = function (sock, args, next) { next() };\nvar b = function (sock, args, next) { next() };\nvar c = function (sock, args, next) { next() };\n\nrouter.use(a,b,c); \n```\n\nYou can pass in a function that accepts an `Error` object.\n\n```javascript\nrouter.use(function (err, sock, args, next) {\n  console.error(err);\n  \n  //calling next(err) will invoke the next error handler.\n  //to resume operation just call next()\n  next(err);\n});\n```\n\n### Router#use(event:String, fn:Function, ...)\n\nBind the `function` to the `event`.\n\n```javascript\nrouter.use('chat', function (sock, args, next) {\n  assert.equal(args[0], 'chat');\n  args[1] = args[1].length > 128 ? args[1].slice(0, 125) + '...' : args[1];\n  next();\n});\n```\n\nYou can also pass in multiple `function`s for handling the `event`.\n\n```javascript\nvar chop = function (sock, args, next) { next() };\nvar clean = function (sock, args, next) { next() };\nvar pretty = function (sock, args, next) { next() };\n\nrouter.use('chat', chop, clean, pretty);\n```\n\n### Router#use(event:RegExp, fn:Function, ...)\n\nBind the `function` using a `RegExp` pattern to match the `event`.\n\n```javascript\nrouter.use(/\\w+/, function (sock, args, next) {\n  assert.equal(args[0], 'chat');\n  args[1] = args[1].length > 128 ? args[1].slice(0, 125) + '...' : args[1];\n  next();\n});\n```\n\nYou can also pass in multiple `function`s for handling the `event`.\n\n```javascript\nvar chop = function (sock, args, next) { next() };\nvar clean = function (sock, args, next) { next() };\nvar pretty = function (sock, args, next) { next() };\n\nrouter.use(/\\w+/, chop, clean, pretty);\n```\n\n### Router#use(router:Router, ...)\n\nYou can attach another `Router` instance to your `Router` instance.\n\n```javascript\nvar another = Router();\nanother.use(function (sock, args, next) { next(); });\n\nrouter.use(another);\n```\n\nAttach multiple routers in a single call.\n\n```javascript\nvar foo = Router();\nfoo.use(function (sock, args, next) { next(); });\n\nvar bar = Router();\nbar.use(function (sock, args, next) { next(); });\n\nvar baz = Router();\nbaz.use(function (sock, args, next) { next(); });\n\nrouter.use(foo, bar, baz);\n```\n\n### Router#use(name:String, router:Router, ...)\n\nJust like attaching a `function` to the router given the `event`.  You can attach `Router`\ninstance as well to the `event`.\n\n```javascript\nvar foo = Router();\nfoo.use(function (sock, args, next) { next(); });\n\nrouter.use('some event', foo);\n```\n\nAttach multiple routers in a single call to the `event` too.\n\n```javascript\nvar foo = Router();\nfoo.use(function (sock, args, next) { next(); });\n\nvar bar = Router();\nbar.use(function (sock, args, next) { next(); });\n\nvar baz = Router();\nbaz.use(function (sock, args, next) { next(); });\n\nrouter.use('some event', foo, bar, baz);\n```\n\n### Router#use(fns:Array, ...)\n\nAttach an `Array` of `Fuction`'s or `Router` instances, or an `Array` or `Array`s .\n\n```javascript\nvar middleware = [\n  function (sock, args, next) { next(); },\n  [\n    function (sock, args, next) { next(); },\n    Router().use(function (sock, args, next) { next(); }),\n    function (sock, args, next) { next(); },\n  ],\n  Router().use(function (sock, args, next) { next(); })\n];\n\nvar errHandler = function (err, sock, args, next) { next(err); } \n\nrouter.use(middleware, errHandler);\n```\n\n### Router#use(name:String, fns:Array, ...)\n\nAttach everything to an event.\n\n```javascript\nvar middleware = [\n  function (sock, args, next) { next(); },\n  [\n    function (sock, args, next) { next(); },\n    Router().use(function (sock, args, next) { next(); }),\n    function (sock, args, next) { next(); },\n  ],\n  Router().use(function (sock, args, next) { next(); })\n];\n\nvar errHandler = function (err, sock, args, next) { next(err); } \n\nrouter.use('only this event', middleware, errHandler);\n```\n\n### Router#on(...)\n\nThis is an alias to to the `use` method.  It does the same thing.\n\n```javascript\nrouter.on(function (sock, args, next) { next() });\n```\n\n# Installation and Environment Setup\n\nInstall node.js (See download and install instructions here: http://nodejs.org/).\n\nClone this repository\n\n    > git clone git@github.com:turbonetix/socket.io-events.git\n\ncd into the directory and install the dependencies\n\n    > cd socket.io-eventst\n    > npm install && npm shrinkwrap --dev\n\n# Running Tests\n\nInstall coffee-script\n\n    > npm install coffee-script -g\n\nTests are run using grunt.  You must first globally install the grunt-cli with npm.\n\n    > sudo npm install -g grunt-cli\n\n## Unit Tests\n\nTo run the tests, just run grunt\n\n    > grunt spec\n",
  "readmeFilename": "README.md",
  "_id": "socket.io-events@0.4.2",
  "_shasum": "6cb71671d6a06e5022d4d4796ddb3c9adedf4f30",
  "_from": "socket.io-events@",
  "_resolved": "https://registry.npmjs.org/socket.io-events/-/socket.io-events-0.4.2.tgz"
}
